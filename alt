<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <meta name="description" content="Join CharlestonHacks for transformative hackathons and tech meetups in Charleston, SC. Build, learn, and connect with local innovators.">
    <meta property="og:title" content="CharlestonHacks | Charleston Hackathons & Tech Events" />
    <meta property="og:description" content="CharlestonHacks promotes tech events including the AI Film Fest. Join us for exciting events and stay updated." />
    <meta property="og:image" content="images/reactiveh.png" />
    <meta property="og:url" content="https://charlestonhacks.com" />
    <meta name="twitter:card" content="summary_large_image" />
    <title>CharlestonHacks - Home</title>
    <link rel="icon" href="favicon.ico" type="image/x-icon">
    <link rel="apple-touch-icon" href="images/apple-touch-icon.png">
    <link rel="manifest" href="manifest.json" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <style>
        /* Reset & Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary-color: #ffd700;
            --secondary-color: #ff6b35;
            --accent-color: #4ecdc4;
            --text-color: #333;
            --bg-color: #f8f9fa;
            --card-bg: #ffffff;
            --shadow: 0 4px 20px rgba(0,0,0,0.1);
            --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        @media (prefers-color-scheme: dark) {
            :root {
                --text-color: #e0e0e0;
                --bg-color: #1a1a1a;
                --card-bg: #2a2a2a;
                --shadow: 0 4px 20px rgba(0,0,0,0.3);
            }
        }

        @media (prefers-reduced-motion: reduce) {
            *, *::before, *::after {
                animation-duration: 0.01ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.01ms !important;
            }
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--bg-color);
            color: var(--text-color);
            overflow-x: hidden;
            transition: var(--transition);
        }

        /* Loading Screen */
        .loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            transition: opacity 0.5s ease;
        }

        .loading-screen.hidden {
            opacity: 0;
            pointer-events: none;
        }

        .loading-spinner {
            width: 60px;
            height: 60px;
            border: 4px solid rgba(255,255,255,0.3);
            border-top: 4px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 20px;
        }

        .loading-text {
            color: white;
            font-size: 18px;
            font-weight: 600;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Main Layout */
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        /* Header */
        .header {
            text-align: center;
            margin-bottom: 40px;
            opacity: 0;
            transform: translateY(-20px);
            animation: fadeInUp 0.8s ease forwards;
        }

        .header h1 {
            font-size: 3rem;
            font-weight: 800;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 10px;
        }

        .header p {
            font-size: 1.2rem;
            opacity: 0.8;
        }

        /* Progress Bar */
        .progress-container {
            margin-bottom: 30px;
            opacity: 0;
            animation: fadeInUp 0.8s ease 0.2s forwards;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: rgba(255,215,0,0.2);
            border-radius: 4px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
            width: 0%;
            transition: width 0.5s ease;
            border-radius: 4px;
        }

        .progress-text {
            text-align: center;
            margin-top: 10px;
            font-size: 14px;
            opacity: 0.7;
        }

        /* Card Panel */
        .panel {
            position: relative;
            background: var(--card-bg);
            border-radius: 20px;
            padding: 40px;
            box-shadow: var(--shadow);
            margin-bottom: 40px;
            opacity: 0;
            transform: translateY(20px);
            animation: fadeInUp 0.8s ease 0.4s forwards;
        }

        .media-container {
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 400px;
            cursor: pointer;
            border-radius: 15px;
            overflow: hidden;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .main-card {
            max-width: 100%;
            max-height: 400px;
            width: auto;
            height: auto;
            border-radius: 10px;
            transition: var(--transition);
            box-shadow: var(--shadow);
        }

        .main-card:hover {
            transform: scale(1.02);
        }

        /* Mission Content */
        .mission-content {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.9);
            display: none;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            color: white;
            text-align: center;
            padding: 40px;
            backdrop-filter: blur(10px);
        }

        .mission-video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            opacity: 0;
            transition: opacity 0.5s ease;
        }

        .innovation-banner {
            width: 85%;
            height: auto;
            cursor: pointer;
            transition: var(--transition);
            border-radius: 10px;
        }

        .innovation-banner:hover {
            transform: scale(1.05);
        }

        /* Navigation Buttons */
        .nav-buttons {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }

        .nav-button {
            position: absolute;
            width: 80px;
            height: 80px;
            background: rgba(255,255,255,0.9);
            border: none;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: var(--transition);
            pointer-events: all;
            backdrop-filter: blur(10px);
            box-shadow: var(--shadow);
        }

        .nav-button:hover {
            transform: scale(1.1);
            background: rgba(255,255,255,1);
        }

        .nav-button:focus {
            outline: 3px solid var(--primary-color);
            outline-offset: 2px;
        }

        .nav-button img {
            width: 50px;
            height: 50px;
            object-fit: contain;
            pointer-events: none;
        }

        .nav-button.discovered {
            background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
            box-shadow: 0 0 20px rgba(255,215,0,0.5);
        }

        /* Button Positions */
        .top-left { top: 30px; left: 30px; }
        .top-right { top: 30px; right: 30px; }
        .bottom-left { bottom: 30px; left: 30px; }
        .bottom-right { bottom: 30px; right: 30px; }

        /* Tooltip */
        .tooltip {
            position: absolute;
            background: rgba(0,0,0,0.9);
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 12px;
            white-space: nowrap;
            opacity: 0;
            transform: translateY(-10px);
            transition: var(--transition);
            pointer-events: none;
            z-index: 1000;
        }

        .nav-button:hover .tooltip {
            opacity: 1;
            transform: translateY(-45px);
        }

        /* Achievements */
        .achievements {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }

        .achievement {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 12px 20px;
            border-radius: 25px;
            margin-bottom: 10px;
            transform: translateX(300px);
            transition: var(--transition);
            box-shadow: var(--shadow);
            font-size: 14px;
            font-weight: 600;
        }

        .achievement.show {
            transform: translateX(0);
        }

        /* Card Collection */
        .card-collection {
            position: fixed;
            bottom: 20px;
            left: 20px;
            z-index: 1000;
        }

        .collection-toggle {
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, var(--accent-color), var(--primary-color));
            border: none;
            border-radius: 50%;
            color: white;
            font-size: 24px;
            cursor: pointer;
            transition: var(--transition);
            box-shadow: var(--shadow);
        }

        .collection-toggle:hover {
            transform: scale(1.1);
        }

        .collection-panel {
            position: absolute;
            bottom: 80px;
            left: 0;
            width: 300px;
            max-height: 400px;
            background: var(--card-bg);
            border-radius: 15px;
            box-shadow: var(--shadow);
            padding: 20px;
            transform: translateY(20px) scale(0.9);
            opacity: 0;
            transition: var(--transition);
            pointer-events: none;
            overflow-y: auto;
        }

        .collection-panel.open {
            transform: translateY(0) scale(1);
            opacity: 1;
            pointer-events: all;
        }

        .collection-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
        }

        .collection-card {
            aspect-ratio: 1;
            background: #f0f0f0;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            text-align: center;
            transition: var(--transition);
        }

        .collection-card.discovered {
            background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
            color: white;
        }

        /* Countdown */
        .countdown-container {
            text-align: center;
            margin: 40px 0;
            opacity: 0;
            animation: fadeInUp 0.8s ease 0.6s forwards;
        }

        .countdown {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 10px;
        }

        .countdown-label {
            font-size: 1rem;
            opacity: 0.7;
        }

        /* Social Icons */
        .social-container {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: auto;
            padding-top: 40px;
            opacity: 0;
            animation: fadeInUp 0.8s ease 0.8s forwards;
        }

        .social-link {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            text-decoration: none;
            transition: var(--transition);
            font-size: 20px;
        }

        .social-link:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        }

        /* Animations */
        @keyframes fadeInUp {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes glow {
            0% { box-shadow: 0 0 5px var(--primary-color); }
            50% { box-shadow: 0 0 30px var(--primary-color), 0 0 50px var(--primary-color); }
            100% { box-shadow: 0 0 5px var(--primary-color); }
        }

        .glow-animate {
            animation: glow 0.6s ease-in-out;
        }

        @keyframes flipX {
            0% { transform: rotateY(0); }
            50% { transform: rotateY(90deg); }
            100% { transform: rotateY(0); }
        }

        @keyframes flipY {
            0% { transform: rotateX(0); }
            50% { transform: rotateX(90deg); }
            100% { transform: rotateX(0); }
        }

        .flip-x { animation: flipX 0.8s ease-in-out; }
        .flip-y { animation: flipY 0.8s ease-in-out; }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container { padding: 15px; }
            .header h1 { font-size: 2rem; }
            .panel { padding: 20px; }
            .nav-button { width: 60px; height: 60px; }
            .nav-button img { width: 35px; height: 35px; }
            .top-left, .bottom-left { left: 15px; }
            .top-right, .bottom-right { right: 15px; }
            .top-left, .top-right { top: 15px; }
            .bottom-left, .bottom-right { bottom: 15px; }
            .countdown { font-size: 1.5rem; }
            .collection-panel { width: 250px; }
            .achievements { top: 10px; right: 10px; }
        }

        @media (max-width: 480px) {
            .header h1 { font-size: 1.5rem; }
            .media-container { min-height: 300px; }
            .nav-button { width: 50px; height: 50px; }
            .nav-button img { width: 30px; height: 30px; }
            .social-container { gap: 15px; }
            .social-link { width: 40px; height: 40px; font-size: 16px; }
        }

        /* Accessibility */
        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }
    </style>
</head>
<body>
    <!-- Loading Screen -->
    <div id="loadingScreen" class="loading-screen">
        <div class="loading-spinner"></div>
        <div class="loading-text">Loading CharlestonHacks...</div>
    </div>

    <!-- Achievements -->
    <div id="achievements" class="achievements" aria-live="polite"></div>

    <!-- Card Collection -->
    <div class="card-collection">
        <button id="collectionToggle" class="collection-toggle" aria-label="Toggle card collection">
            <i class="fas fa-layer-group"></i>
        </button>
        <div id="collectionPanel" class="collection-panel">
            <h3 style="margin-bottom: 15px; text-align: center;">Discovered Cards</h3>
            <div id="collectionGrid" class="collection-grid"></div>
        </div>
    </div>

    <div class="container">
        <!-- Header -->
        <header class="header">
            <h1>CharlestonHacks</h1>
            <p>Transformative hackathons and tech meetups in Charleston, SC</p>
        </header>

        <!-- Progress Bar -->
        <div class="progress-container">
            <div class="progress-bar">
                <div id="progressFill" class="progress-fill"></div>
            </div>
            <div id="progressText" class="progress-text">Exploration Progress: 0/4 areas discovered</div>
        </div>

        <!-- Main Panel -->
        <main class="panel">
            <div class="media-container" id="mediaContainer" tabindex="0" role="button" aria-label="Flip main card to reveal content">
                <img id="mainCard" class="main-card" src="https://via.placeholder.com/400x300/667eea/ffffff?text=CharlestonHacks" alt="CharlestonHacks Main Card" />
                
                <div id="missionContent" class="mission-content">
                    <video id="missionVideo" class="mission-video" muted playsinline controls>
                        <source src="https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                    <img id="innovationBanner" class="innovation-banner" src="https://via.placeholder.com/600x200/ff6b35/ffffff?text=Innovation+Engine" alt="Innovation Engine Banner" />
                </div>

                <div class="nav-buttons">
                    <button class="nav-button top-left" data-section="info" data-url="#info" tabindex="0" aria-label="Information section">
                        <img src="https://via.placeholder.com/50x50/ffd700/333333?text=i" alt="Info" />
                        <div class="tooltip">Information</div>
                    </button>
                    <button class="nav-button top-right" data-section="innovation" data-url="#innovation" tabindex="0" aria-label="Innovation Engine section">
                        <img src="https://via.placeholder.com/50x50/4ecdc4/333333?text=🚀" alt="Innovation" />
                        <div class="tooltip">Innovation Engine</div>
                    </button>
                    <button class="nav-button bottom-left" data-section="news" data-url="#news" tabindex="0" aria-label="News section">
                        <img src="https://via.placeholder.com/50x50/ff6b35/333333?text=📰" alt="News" />
                        <div class="tooltip">Latest News</div>
                    </button>
                    <button class="nav-button bottom-right" data-section="people" data-url="#people" tabindex="0" aria-label="People section">
                        <img src="https://via.placeholder.com/50x50/764ba2/333333?text=👥" alt="People" />
                        <div class="tooltip">Community</div>
                    </button>
                </div>
            </div>
        </main>

        <!-- Countdown -->
        <section class="countdown-container">
            <div id="countdown" class="countdown">Loading...</div>
            <div class="countdown-label">Until Next Event</div>
        </section>

        <!-- Footer with Social Links -->
        <footer class="social-container">
            <a href="https://www.linkedin.com/company/charlestonhacks" class="social-link" aria-label="LinkedIn">
                <i class="fab fa-linkedin"></i>
            </a>
            <a href="https://www.instagram.com/charlestonhacks/" class="social-link" aria-label="Instagram">
                <i class="fab fa-instagram"></i>
            </a>
            <a href="mailto:hello@charlestonhacks.com" class="social-link" aria-label="Email">
                <i class="fas fa-envelope"></i>
            </a>
            <a href="https://twitter.com/charlestonhacks" class="social-link" aria-label="Twitter">
                <i class="fab fa-twitter"></i>
            </a>
            <a href="https://www.facebook.com/charlestonhacks" class="social-link" aria-label="Facebook">
                <i class="fab fa-facebook"></i>
            </a>
        </footer>
    </div>

    <script>
        // Application State
        const AppState = {
            discoveredCards: new Set(),
            currentCard: 'main',
            achievements: [],
            cardFlipped: false,
            touchStartTime: 0,
            isNavigating: false
        };

        // Configuration
        const CONFIG = {
            countdown: {
                targetDate: "June 28, 2025 00:00:00",
                completedMessage: "Event is Live!"
            },
            cards: [
                { id: 'main', name: 'CharlestonHacks', image: 'https://via.placeholder.com/400x300/667eea/ffffff?text=CharlestonHacks' },
                { id: 'info', name: 'Information', image: 'https://via.placeholder.com/400x300/ffd700/333333?text=Information' },
                { id: 'innovation', name: 'Innovation Engine', image: 'https://via.placeholder.com/400x300/4ecdc4/333333?text=Innovation' },
                { id: 'news', name: 'News & Updates', image: 'https://via.placeholder.com/400x300/ff6b35/ffffff?text=News' },
                { id: 'people', name: 'Community', image: 'https://via.placeholder.com/400x300/764ba2/ffffff?text=People' }
            ],
            achievements: [
                { id: 'first_flip', name: 'Card Flipper', description: 'Flipped your first card!' },
                { id: 'explorer', name: 'Explorer', description: 'Discovered 2 sections!' },
                { id: 'completionist', name: 'Completionist', description: 'Found all sections!' },
                { id: 'social_butterfly', name: 'Social Butterfly', description: 'Clicked a social link!' }
            ]
        };

        // Audio Controller
        const AudioController = {
            context: null,
            sounds: new Map(),
            
            async init() {
                try {
                    this.context = new (window.AudioContext || window.webkitAudioContext)();
                    await this.createSounds();
                } catch (error) {
                    console.warn('Audio not supported:', error);
                }
            },

            async createSounds() {
                // Create synthetic sounds since we can't load external audio files
                const sounds = {
                    flip: this.createTone(800, 0.1),
                    click: this.createTone(1000, 0.05),
                    achievement: this.createTone(1200, 0.2),
                    whoosh: this.createNoise(0.1)
                };
                
                for (const [name, buffer] of Object.entries(sounds)) {
                    this.sounds.set(name, buffer);
                }
            },

            createTone(frequency, duration) {
                if (!this.context) return null;
                const sampleRate = this.context.sampleRate;
                const buffer = this.context.createBuffer(1, sampleRate * duration, sampleRate);
                const data = buffer.getChannelData(0);
                
                for (let i = 0; i < buffer.length; i++) {
                    data[i] = Math.sin(2 * Math.PI * frequency * i / sampleRate) * 0.1;
                }
                return buffer;
            },

            createNoise(duration) {
                if (!this.context) return null;
                const sampleRate = this.context.sampleRate;
                const buffer = this.context.createBuffer(1, sampleRate * duration, sampleRate);
                const data = buffer.getChannelData(0);
                
                for (let i = 0; i < buffer.length; i++) {
                    data[i] = (Math.random() * 2 - 1) * 0.05;
                }
                return buffer;
            },

            play(soundName) {
                if (!this.context || !this.sounds.has(soundName)) return;
                
                try {
                    const source = this.context.createBufferSource();
                    source.buffer = this.sounds.get(soundName);
                    source.connect(this.context.destination);
                    source.start();
                } catch (error) {
                    console.warn('Could not play sound:', error);
                }
            }
        };

        // Progress Controller
        const ProgressController = {
            update() {
                const progress = (AppState.discoveredCards.size / 4) * 100;
                const progressFill = document.getElementById('progressFill');
                const progressText = document.getElementById('progressText');
                
                progressFill.style.width = `${progress}%`;
                progressText.textContent = `Exploration Progress: ${AppState.discoveredCards.size}/4 areas discovered`;
                
                // Check for achievements
                if (AppState.discoveredCards.size === 2 && !AppState.achievements.includes('explorer')) {
                    AchievementController.unlock('explorer');
                }
                if (AppState.discoveredCards.size === 4 && !AppState.achievements.includes('completionist')) {
                    AchievementController.unlock('completionist');
                }
            }
        };

        // Achievement Controller
        const AchievementController = {
            unlock(achievementId) {
                if (AppState.achievements.includes(achievementId)) return;
                
                AppState.achievements.push(achievementId);
                const achievement = CONFIG.achievements.find(a => a.id === achievementId);
                if (!achievement) return;

                this.showAchievement(achievement);
                AudioController.play('achievement');
                
                // Add haptic feedback if supported
                if (navigator.vibrate) {
                    navigator.vibrate([100, 50, 100]);
                }
            },

            showAchievement(achievement) {
                const container = document.getElementById('achievements');
                const element = document.createElement('div');
                element.className = 'achievement';
                element.innerHTML = `
                    <strong>${achievement.name}</strong><br>
                    <small>${achievement.description}</small>
                `;
                
                container.appendChild(element);
                
                // Animate in
                setTimeout(() => element.classList.add('show'), 100);
                
                // Remove after delay
                setTimeout(() => {
                    element.style.transform = 'translateX(300px)';
                    setTimeout(() => element.remove(), 300);
                }, 3000);
            }
        };

        // Card Collection Controller
        const CollectionController = {
            isOpen: false,
            
            init() {
                const toggle = document.getElementById('collectionToggle');
                const panel = document.getElementById('collectionPanel');
                const grid = document.getElementById('collectionGrid');
                
                // Create collection grid
                CONFIG.cards.forEach(card => {
                    const cardElement = document.createElement('div');
                    cardElement.className = 'collection-card';
                    cardElement.textContent = card.name;
                    cardElement.dataset.cardId = card.id;
                    grid.appendChild(cardElement);
                });
                
                toggle.addEventListener('click', () => this.toggle());
                
                // Close on click outside
                document.addEventListener('click', (e) => {
                    if (!toggle.contains(e.target) && !panel.contains(e.target)) {
                        this.close();
                    }
                });
            },
            
            toggle() {
                this.isOpen ? this.close() : this.open();
            },
            
            open() {
                const panel = document.getElementById('collectionPanel');
                panel.classList.add('open');
                this.isOpen = true;
                this.updateCollection();
            },
            
            close() {
                const panel = document.getElementById('collectionPanel');
                panel.classList.remove('open');
                this.isOpen = false;
            },
            
            updateCollection() {
                const cards = document.querySelectorAll('.collection-card');
                cards.forEach(card => {
                    const cardId = card.dataset.cardId;
                    if (AppState.discoveredCards.has(cardId)) {
                        card.classList.add('discovered');
                    }
                });
            }
        };

        // Card Controller
        const CardController = {
            currentCard: null,
            
            flipCard(newCardId = null) {
                if (AppState.isNavigating) return;
                AppState.isNavigating = true;
                
                const mainCard = document.getElementById('mainCard');
                const flipClass = Math.random() > 0.5 ? 'flip-x' : 'flip-y';
                
                mainCard.classList.add(flipClass);
                AudioController.play('flip');
                
                setTimeout(() => {
                    if (newCardId) {
                        const newCard = CONFIG.cards.find(c => c.id === newCardId);
                        if (newCard) {
                            mainCard.src = newCard.image;
                            mainCard.alt = newCard.name;
                            AppState.currentCard = newCardId;
                            AppState.discoveredCards.add(newCardId);
                        }
                    } else {
                        // Random card for main flip
                        const randomCard = CONFIG.cards[Math.floor(Math.random() * CONFIG.cards.length)];
                        mainCard.src = randomCard.image;
                        mainCard.alt = randomCard.name;
                        AppState.currentCard = randomCard.id;
                        AppState.discoveredCards.add(randomCard.id);
                    }
                    
                    if (!AppState.cardFlipped) {
                        AppState.cardFlipped = true;
                        AchievementController.unlock('first_flip');
                    }
                    
                    ProgressController.update();
                    CollectionController.updateCollection();
                    
                    mainCard.classList.remove(flipClass);
                    AppState.isNavigating = false;
                }, 400);
            },
            
            showMissionContent() {
                const missionContent = document.getElementById('missionContent');
                const missionVideo = document.getElementById('missionVideo');
                
                missionContent.style.display = 'flex';
                
                setTimeout(() => {
                    missionVideo.style.opacity = '1';
                    if (missionVideo.paused) {
                        missionVideo.play().catch(console.warn);
                    }
                }, 100);
            },
            
            hideMissionContent() {
                const missionContent = document.getElementById('missionContent');
                const missionVideo = document.getElementById('missionVideo');
                
                missionContent.style.display = 'none';
                missionVideo.style.opacity = '0';
                missionVideo.pause();
            }
        };

        // Navigation Controller
        const NavigationController = {
            init() {
                const navButtons = document.querySelectorAll('.nav-button');
                navButtons.forEach(button => {
                    button.addEventListener('click', (e) => this.handleNavClick(e));
                    button.addEventListener('keydown', (e) => {
                        if (e.key === 'Enter' || e.key === ' ') {
                            e.preventDefault();
                            this.handleNavClick(e);
                        }
                    });
                });
            },
            
            handleNavClick(e) {
                const button = e.currentTarget;
                const section = button.dataset.section;
                const url = button.dataset.url;
                
                // Add glow effect
                button.classList.add('glow-animate');
                button.classList.add('discovered');
                
                AudioController.play('click');
                
                // Discover the section
                AppState.discoveredCards.add(section);
                ProgressController.update();
                CollectionController.updateCollection();
                
                // Simulate navigation delay for visual feedback
                setTimeout(() => {
                    CardController.flipCard(section);
                    button.classList.remove('glow-animate');
                }, 300);
            }
        };

        // Countdown Controller
        const CountdownController = {
            interval: null,
            
            init() {
                this.start();
            },
            
            start() {
                const countDownDate = new Date(CONFIG.countdown.targetDate).getTime();
                const countdownElement = document.getElementById('countdown');
                
                this.interval = setInterval(() => {
                    const now = new Date().getTime();
                    const distance = countDownDate - now;
                    
                    if (distance < 0) {
                        countdownElement.textContent = CONFIG.countdown.completedMessage;
                        clearInterval(this.interval);
                        return;
                    }
                    
                    const days = Math.floor(distance / (1000 * 60 * 60 * 24));
                    const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                    const seconds = Math.floor((distance % (1000 * 60)) / 1000);
                    
                    countdownElement.textContent = `${days}d ${hours}h ${minutes}m ${seconds}s`;
                }, 1000);
            }
        };

        // Touch Controller for mobile gestures
        const TouchController = {
            startX: 0,
            startY: 0,
            startTime: 0,
            
            init() {
                const mediaContainer = document.getElementById('mediaContainer');
                
                mediaContainer.addEventListener('touchstart', (e) => this.handleTouchStart(e), { passive: true });
                mediaContainer.addEventListener('touchmove', (e) => this.handleTouchMove(e), { passive: false });
                mediaContainer.addEventListener('touchend', (e) => this.handleTouchEnd(e), { passive: true });
            },
            
            handleTouchStart(e) {
                this.startX = e.touches[0].clientX;
                this.startY = e.touches[0].clientY;
                this.startTime = Date.now();
            },
            
            handleTouchMove(e) {
                // Prevent scrolling during gesture
                if (Math.abs(e.touches[0].clientX - this.startX) > 10) {
                    e.preventDefault();
                }
            },
            
            handleTouchEnd(e) {
                const endX = e.changedTouches[0].clientX;
                const endY = e.changedTouches[0].clientY;
                const endTime = Date.now();
                
                const deltaX = endX - this.startX;
                const deltaY = endY - this.startY;
                const deltaTime = endTime - this.startTime;
                
                // Detect swipe gestures
                if (Math.abs(deltaX) > 50 || Math.abs(deltaY) > 50) {
                    if (deltaTime < 300) { // Quick swipe
                        this.handleSwipe(deltaX, deltaY);
                    }
                } else if (deltaTime < 200) { // Quick tap
                    this.handleTap();
                }
            },
            
            handleSwipe(deltaX, deltaY) {
                AudioController.play('whoosh');
                
                if (Math.abs(deltaX) > Math.abs(deltaY)) {
                    // Horizontal swipe
                    if (deltaX > 0) {
                        // Swipe right - show next card
                        CardController.flipCard();
                    } else {
                        // Swipe left - show previous card
                        CardController.flipCard();
                    }
                } else {
                    // Vertical swipe
                    if (deltaY > 0) {
                        // Swipe down - hide mission content
                        CardController.hideMissionContent();
                    } else {
                        // Swipe up - show mission content
                        CardController.showMissionContent();
                    }
                }
            },
            
            handleTap() {
                CardController.flipCard();
            }
        };

        // Loading Controller
        const LoadingController = {
            hide() {
                const loadingScreen = document.getElementById('loadingScreen');
                loadingScreen.classList.add('hidden');
                setTimeout(() => loadingScreen.remove(), 500);
            }
        };

        // Social Controller
        const SocialController = {
            init() {
                const socialLinks = document.querySelectorAll('.social-link');
                socialLinks.forEach(link => {
                    link.addEventListener('click', () => {
                        if (!AppState.achievements.includes('social_butterfly')) {
                            AchievementController.unlock('social_butterfly');
                        }
                        AudioController.play('click');
                    });
                });
            }
        };

        // Main App Controller
        const App = {
            async init() {
                try {
                    // Initialize audio
                    await AudioController.init();
                    
                    // Initialize controllers
                    NavigationController.init();
                    CollectionController.init();
                    CountdownController.init();
                    TouchController.init();
                    SocialController.init();
                    
                    // Set up main card interaction
                    this.setupMainCardInteraction();
                    
                    // Set up innovation banner
                    this.setupInnovationBanner();
                    
                    // Set up keyboard navigation
                    this.setupKeyboardNavigation();
                    
                    // Set up page visibility handling
                    this.setupPageVisibility();
                    
                    // Initialize discovered cards with main card
                    AppState.discoveredCards.add('main');
                    ProgressController.update();
                    
                    // Hide loading screen
                    setTimeout(() => LoadingController.hide(), 1500);
                    
                } catch (error) {
                    console.error('App initialization failed:', error);
                    LoadingController.hide();
                }
            },
            
            setupMainCardInteraction() {
                const mediaContainer = document.getElementById('mediaContainer');
                
                mediaContainer.addEventListener('click', () => {
                    if (!AppState.cardFlipped) {
                        CardController.flipCard();
                        CardController.showMissionContent();
                    } else {
                        CardController.flipCard();
                    }
                });
                
                mediaContainer.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        mediaContainer.click();
                    }
                });
            },
            
            setupInnovationBanner() {
                const banner = document.getElementById('innovationBanner');
                banner.addEventListener('click', () => {
                    const flipClass = Math.random() > 0.5 ? 'flip-x' : 'flip-y';
                    banner.classList.add(flipClass);
                    
                    setTimeout(() => {
                        window.open('https://innovation-engine.devpost.com/', '_blank');
                        banner.classList.remove(flipClass);
                    }, 400);
                });
            },
            
            setupKeyboardNavigation() {
                document.addEventListener('keydown', (e) => {
                    switch(e.key) {
                        case 'ArrowUp':
                            e.preventDefault();
                            CardController.showMissionContent();
                            break;
                        case 'ArrowDown':
                            e.preventDefault();
                            CardController.hideMissionContent();
                            break;
                        case 'ArrowLeft':
                        case 'ArrowRight':
                            e.preventDefault();
                            CardController.flipCard();
                            break;
                        case 'c':
                        case 'C':
                            CollectionController.toggle();
                            break;
                        case 'Escape':
                            CollectionController.close();
                            CardController.hideMissionContent();
                            break;
                    }
                });
            },
            
            setupPageVisibility() {
                document.addEventListener('visibilitychange', () => {
                    if (document.hidden) {
                        // Pause video when page is hidden
                        const video = document.getElementById('missionVideo');
                        if (!video.paused) {
                            video.pause();
                        }
                    }
                });
                
                // Handle page unload
                window.addEventListener('beforeunload', () => {
                    if (CountdownController.interval) {
                        clearInterval(CountdownController.interval);
                    }
                });
            }
        };

        // Initialize app when page loads
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => App.init());
        } else {
            App.init();
        }

        // Service Worker Registration (if available)
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/sw.js')
                    .then(registration => console.log('SW registered'))
                    .catch(error => console.log('SW registration failed'));
            });
        }
    </script>
</body>
</html>
